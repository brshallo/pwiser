% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pairwise.R
\name{pairwise}
\alias{pairwise}
\title{Apply a function (or functions) across all combinations of pairs of selected columns}
\usage{
pairwise(
  .cols = everything(),
  .fns = NULL,
  ...,
  .names = NULL,
  .is_commutative = FALSE
)
}
\arguments{
\item{.cols}{<\code{\link[=dplyr_tidy_select]{tidy-select}}> Columns to transform.}

\item{.fns}{Functions to apply to each pair of the selected columns.
Possible values are:
\itemize{
\item A function
\item A purrr-style lambda, e.g. \code{~ stats::cor.test(.x, .y)$p.value}
\item A list of functions / lambdas, e.g.
}\preformatted{  list(difference = `-`, ratio = ~ .x / .y)
}

The output length of a function should in most cases be 1 (in the
summarisng case) or the length of an individual input (in the mutating
case), similar to what is expected by \code{summarise()} and \code{mutate()}
respectively.}

\item{...}{Additional arguments for the function calls in \code{.fns}.}

\item{.names}{A glue specification that describes how to name the outputted
columns. Use \code{{.col_x}} and \code{{.col_y}} to specify inputted column names and
\code{{.fn}} to specify function name when \code{.fns} is a named list.

Default format when \code{.fns} is not a named list is:
\code{"{.col_x}_{.col_y}_{.fn}"}

When \code{.fns} is a named list default format is:
\code{"{.col_x}_{.col_y}_{.fn}"}}

\item{.is_commutative}{If \code{TRUE}, only create new column for
\verb{\{.col_x\}_\{.col_y\}} (not \verb{\{.col_y\}_\{.col_x\}}). Use to save computation time
when applying commutative functions (e.g. pearson's correlation).}
}
\value{
\code{pairwise()} returns a tibble with one column for each possible pairwise combination in \code{.cols}.
}
\description{
\code{pairwise()} creates all combinations of columns and then applies function(s)
to these.

\code{pairwise()} largely mirror \code{dplyr::across()} in style (and is meant to be
used primarily within \code{dplyr::mutate()} and \code{dplyr::summarise()}).
}
\examples{
library(dplyr)
library(pwiser)
library(palmerpenguins)

penguins <- na.omit(penguins)

# Grouped summary of correlations
penguins \%>\%
  group_by(species) \%>\%
  summarise(pairwise(contains("_mm"), ~stats::cor.test(.x, .y)$p.value, .is_commutative = TRUE),
            n = n())

# Building new columns
penguins \%>\%
  mutate(pairwise(contains("_mm"),
                  list(ratio = `/`, difference = `-`),
                  .names = "features_{.fn}_{.col_x}_{.col_y}"),
         n = n()) \%>\%
  glimpse()
}
\seealso{
\code{dplyr::across()}, \code{corrr::colpair_map()}, \code{{widyr}}, \code{recipes::step_interact()}, \code{recipes::step_ratio}
}
